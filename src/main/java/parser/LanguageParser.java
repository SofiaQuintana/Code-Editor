
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.Symbol;
import lexer.LanguageLexer;
import java.util.HashMap;
import java.util.LinkedList;
import environment.GlobalError;
import abstract_syntax_tree.Operation;
import abstract_syntax_tree.Instruction;
import abstract_syntax_tree.RegexType;
import abstract_syntax_tree.SymType;
import abstract_syntax_tree.RegularExpression;
import three_method_lexer.Leaf;
import three_method_lexer.Node;
import dummy_classes.Language;
import dummy_classes.Terminal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LanguageParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public LanguageParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LanguageParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LanguageParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\013\000\002\002" +
    "\012\000\002\002\003\000\002\017\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\007" +
    "\000\002\017\003\000\002\003\006\000\002\004\006\000" +
    "\002\005\006\000\002\005\006\000\002\015\006\000\002" +
    "\006\006\000\002\007\004\000\002\007\003\000\002\010" +
    "\004\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\020\007\000\002\020\007\000\002\020\006\000" +
    "\002\020\006\000\002\025\010\000\002\025\010\000\002" +
    "\025\007\000\002\025\007\000\002\025\006\000\002\025" +
    "\006\000\002\025\005\000\002\025\005\000\002\025\006" +
    "\000\002\025\006\000\002\025\006\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\004" +
    "\000\002\026\005\000\002\026\003\000\002\027\003\000" +
    "\002\027\002\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\004\000\002\021\004\000\002\022\005\000" +
    "\002\022\004\000\002\011\005\000\002\011\003\000\002" +
    "\023\006\000\002\023\005\000\002\012\005\000\002\012" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\031\006\000\002\031\006\000\002\032\004\000" +
    "\002\032\004\000\002\032\003\000\002\032\003\000\002" +
    "\013\007\000\002\013\005\000\002\014\004\000\002\014" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\006\003\004\004\007\001\002\000\006\002" +
    "\ufffe\013\uffee\001\002\000\014\005\221\006\217\007\216" +
    "\010\222\013\ufffd\001\002\000\004\013\015\001\002\000" +
    "\004\012\012\001\002\000\004\002\011\001\002\000\004" +
    "\002\001\001\002\000\004\014\013\001\002\000\004\011" +
    "\014\001\002\000\014\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\013\uffed\001\002\000\010\013\021\015\020\016\016\001" +
    "\002\000\010\013\uffe3\015\uffe3\016\uffe3\001\002\000\010" +
    "\013\206\015\205\016\204\001\002\000\010\013\uffe2\015" +
    "\uffe2\016\uffe2\001\002\000\006\014\022\035\023\001\002" +
    "\000\004\034\201\001\002\000\004\034\176\001\002\000" +
    "\010\013\027\014\026\035\025\001\002\000\004\034\173" +
    "\001\002\000\004\034\115\001\002\000\006\037\030\040" +
    "\034\001\002\000\012\041\043\042\036\043\042\045\107" +
    "\001\002\000\004\011\105\001\002\000\004\013\051\001" +
    "\002\000\004\011\047\001\002\000\004\037\035\001\002" +
    "\000\012\041\043\042\036\043\042\046\041\001\002\000" +
    "\006\045\uffaf\046\uffaf\001\002\000\004\046\041\001\002" +
    "\000\004\011\uffb3\001\002\000\006\011\uffb1\044\044\001" +
    "\002\000\006\045\uffae\046\uffae\001\002\000\006\045\uffb0" +
    "\046\uffb0\001\002\000\004\046\041\001\002\000\004\011" +
    "\uffb2\001\002\000\004\011\uffb4\001\002\000\010\013\uffba" +
    "\037\030\040\034\001\002\000\004\013\uffbc\001\002\000" +
    "\006\045\053\046\054\001\002\000\004\002\uffff\001\002" +
    "\000\004\050\102\001\002\000\004\050\055\001\002\000" +
    "\006\045\057\046\060\001\002\000\004\051\064\001\002" +
    "\000\010\045\057\046\060\051\uffa9\001\002\000\010\045" +
    "\057\046\060\051\uffa8\001\002\000\004\051\uffaa\001\002" +
    "\000\004\051\uffab\001\002\000\004\002\uffac\001\002\000" +
    "\016\011\066\015\071\016\065\045\070\046\072\047\073" +
    "\001\002\000\010\045\uffa0\046\uffa0\052\uffa0\001\002\000" +
    "\010\045\uff9f\046\uff9f\052\uff9f\001\002\000\010\045\076" +
    "\046\100\052\101\001\002\000\010\045\uffa3\046\uffa3\052" +
    "\uffa3\001\002\000\010\045\uffa1\046\uffa1\052\uffa1\001\002" +
    "\000\010\045\uffa2\046\uffa2\052\uffa2\001\002\000\004\034" +
    "\074\001\002\000\014\011\066\015\071\016\065\045\070" +
    "\046\072\001\002\000\010\045\076\046\100\052\077\001" +
    "\002\000\010\045\uffa5\046\uffa5\052\uffa5\001\002\000\004" +
    "\002\uffa7\001\002\000\010\045\uffa4\046\uffa4\052\uffa4\001" +
    "\002\000\004\002\uffa6\001\002\000\006\045\057\046\060" +
    "\001\002\000\004\051\064\001\002\000\004\002\uffad\001" +
    "\002\000\010\013\uffb9\037\030\040\034\001\002\000\004" +
    "\013\uffbb\001\002\000\006\011\uffb5\044\113\001\002\000" +
    "\004\045\107\001\002\000\004\011\uffb7\001\002\000\004" +
    "\011\uffb8\001\002\000\004\045\107\001\002\000\004\011" +
    "\uffb6\001\002\000\026\003\123\023\120\025\131\027\127" +
    "\030\130\031\125\032\121\033\116\036\132\054\126\001" +
    "\002\000\042\011\uffca\017\146\020\150\021\147\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\036\uffca\054\uffca\001\002\000\042" +
    "\011\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\036\uffc6\054\uffc6\001\002\000\026\003\123\023" +
    "\120\025\131\027\127\030\130\031\125\032\121\033\116" +
    "\036\132\054\126\001\002\000\042\011\uffcb\017\146\020" +
    "\150\021\147\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\036\uffcb\054" +
    "\uffcb\001\002\000\030\011\165\022\135\023\uffc4\025\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4\054" +
    "\uffc4\001\002\000\034\011\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\036\uffc9\054\uffc9\001\002\000\042\011\uffcc\017\146" +
    "\020\150\021\147\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\127\030\130\031\125\032\uffcc\033\uffcc\036\132" +
    "\054\uffcc\001\002\000\042\011\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\036\uffbd\054\uffbd\001" +
    "\002\000\014\027\127\030\130\031\125\036\132\054\126" +
    "\001\002\000\042\011\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\036\uffbf\054\uffbf\001\002\000" +
    "\042\011\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\036\uffbe\054\uffbe\001\002\000\026\003\123" +
    "\023\120\025\131\027\127\030\130\031\125\032\121\033" +
    "\116\036\132\054\126\001\002\000\042\011\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\036\uffc0" +
    "\054\uffc0\001\002\000\030\022\135\023\uffc4\025\uffc4\026" +
    "\134\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4" +
    "\054\uffc4\001\002\000\042\011\uffd6\017\146\020\150\021" +
    "\147\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\036\uffd6\054\uffd6\001" +
    "\002\000\024\023\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\036\uffc5\054\uffc5\001\002\000\024\023" +
    "\140\025\143\027\127\030\130\031\125\032\141\033\137" +
    "\036\132\054\126\001\002\000\042\011\uffd0\017\146\020" +
    "\150\021\147\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\036\uffd0\054" +
    "\uffd0\001\002\000\026\003\123\023\120\025\131\027\127" +
    "\030\130\031\125\032\121\033\116\036\132\054\126\001" +
    "\002\000\042\011\uffd1\017\146\020\150\021\147\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\036\uffd1\054\uffd1\001\002\000\042" +
    "\011\uffd2\017\146\020\150\021\147\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\127\030\130\031\125\032\uffd2" +
    "\033\uffd2\036\132\054\uffd2\001\002\000\026\003\123\023" +
    "\120\025\131\027\127\030\130\031\125\032\121\033\116" +
    "\036\132\054\126\001\002\000\030\022\135\023\uffc4\025" +
    "\uffc4\026\145\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\036\uffc4\054\uffc4\001\002\000\042\011\uffda\017\146\020" +
    "\150\021\147\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\036\uffda\054" +
    "\uffda\001\002\000\034\011\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\036\uffc1\054\uffc1\001\002\000\034\011\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\036\uffc2\054\uffc2\001\002\000\034" +
    "\011\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\036\uffc3\054\uffc3" +
    "\001\002\000\034\011\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\036\uffdc\054\uffdc\001\002\000\034\011\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\036\uffd5\054\uffd5\001\002\000\042\011" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\036\uffc8\054\uffc8\001\002\000\034\011\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\036\uffd4\054\uffd4\001\002\000\030" +
    "\022\135\023\uffc4\024\156\025\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\036\uffc4\054\uffc4\001\002\000\042" +
    "\011\uffdb\017\146\020\150\021\147\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\036\uffdb\054\uffdb\001\002\000\034\011\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\036\uffdd\054\uffdd\001\002\000" +
    "\034\011\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\036\uffd3\054" +
    "\uffd3\001\002\000\034\011\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\036\uffd8\054\uffd8\001\002\000\014\027\127\030\130" +
    "\031\125\036\132\054\163\001\002\000\042\011\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\036" +
    "\uffc7\054\uffc7\001\002\000\034\011\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\036\uffcf\054\uffcf\001\002\000\010\013\uffe1" +
    "\014\uffe1\035\uffe1\001\002\000\034\011\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\036\uffce\054\uffce\001\002\000\030\022" +
    "\135\023\uffc4\024\170\025\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\036\uffc4\054\uffc4\001\002\000\042\011" +
    "\uffd7\017\146\020\150\021\147\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\036\uffd7\054\uffd7\001\002\000\034\011\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\036\uffd9\054\uffd9\001\002\000\034" +
    "\011\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\036\uffcd\054\uffcd" +
    "\001\002\000\026\003\123\023\120\025\131\027\127\030" +
    "\130\031\125\032\121\033\116\036\132\054\126\001\002" +
    "\000\030\011\175\022\135\023\uffc4\025\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4\054\uffc4\001\002" +
    "\000\010\013\uffe0\014\uffe0\035\uffe0\001\002\000\026\003" +
    "\123\023\120\025\131\027\127\030\130\031\125\032\121" +
    "\033\116\036\132\054\126\001\002\000\030\011\200\022" +
    "\135\023\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\036\uffc4\054\uffc4\001\002\000\010\013\uffde\014" +
    "\uffde\035\uffde\001\002\000\026\003\123\023\120\025\131" +
    "\027\127\030\130\031\125\032\121\033\116\036\132\054" +
    "\126\001\002\000\030\011\203\022\135\023\uffc4\025\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4\054" +
    "\uffc4\001\002\000\010\013\uffdf\014\uffdf\035\uffdf\001\002" +
    "\000\010\013\uffe5\015\uffe5\016\uffe5\001\002\000\010\013" +
    "\uffe4\015\uffe4\016\uffe4\001\002\000\006\014\022\035\023" +
    "\001\002\000\010\013\210\014\026\035\025\001\002\000" +
    "\006\037\030\040\034\001\002\000\004\013\212\001\002" +
    "\000\006\045\053\046\054\001\002\000\004\002\000\001" +
    "\002\000\006\010\222\013\ufffa\001\002\000\012\006\217" +
    "\007\216\010\222\013\ufffc\001\002\000\004\012\243\001" +
    "\002\000\004\012\235\001\002\000\010\007\216\010\222" +
    "\013\ufffb\001\002\000\004\012\227\001\002\000\004\012" +
    "\224\001\002\000\004\013\ufff9\001\002\000\004\014\225" +
    "\001\002\000\004\011\226\001\002\000\004\013\uffe8\001" +
    "\002\000\004\053\230\001\002\000\004\011\231\001\002" +
    "\000\012\006\uffec\007\uffec\010\uffec\013\uffec\001\002\000" +
    "\006\010\222\013\ufff5\001\002\000\004\013\ufff4\001\002" +
    "\000\004\013\ufff0\001\002\000\004\014\236\001\002\000" +
    "\006\011\242\014\uffe6\001\002\000\006\011\241\014\240" +
    "\001\002\000\006\011\uffe7\014\uffe7\001\002\000\010\007" +
    "\uffeb\010\uffeb\013\uffeb\001\002\000\010\007\uffea\010\uffea" +
    "\013\uffea\001\002\000\004\055\244\001\002\000\004\011" +
    "\245\001\002\000\006\010\uffe9\013\uffe9\001\002\000\004" +
    "\013\ufff7\001\002\000\010\007\216\010\222\013\ufff8\001" +
    "\002\000\004\013\ufff6\001\002\000\006\010\222\013\ufff2" +
    "\001\002\000\004\013\ufff1\001\002\000\004\013\uffef\001" +
    "\002\000\004\013\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\010\002\007\003\004\017\005\001\001\000" +
    "\002\001\001\000\012\004\214\005\217\006\222\015\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\031" +
    "\022\032\023\030\001\001\000\006\011\110\024\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\037\024\036\001\001\000" +
    "\002\001\001\000\004\012\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\047\022\032\023\030\001\001\000\002\001" +
    "\001\000\004\031\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\055\001\001\000" +
    "\004\013\062\001\001\000\004\032\061\001\001\000\004" +
    "\032\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\102\001\001\000\004\013\103\001\001\000\002\001" +
    "\001\000\010\021\105\022\032\023\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\113\001\001" +
    "\000\002\001\001\000\010\016\116\025\121\026\123\001" +
    "\001\000\004\030\171\001\001\000\002\001\001\000\010" +
    "\016\116\025\166\026\123\001\001\000\004\030\165\001" +
    "\001\000\004\027\135\001\001\000\002\001\001\000\006" +
    "\016\152\030\163\001\001\000\002\001\001\000\006\016" +
    "\116\026\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\116\025\132\026\123\001\001\000\002\001" +
    "\001\000\004\027\135\001\001\000\004\030\160\001\001" +
    "\000\002\001\001\000\006\016\116\026\141\001\001\000" +
    "\004\030\157\001\001\000\010\016\116\025\154\026\123" +
    "\001\001\000\004\030\153\001\001\000\006\016\152\030" +
    "\151\001\001\000\010\016\116\025\143\026\123\001\001" +
    "\000\004\027\135\001\001\000\004\030\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\135\001\001\000\004\030\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\135\001" +
    "\001\000\004\030\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\116\025\173\026\123\001\001\000" +
    "\004\027\135\001\001\000\002\001\001\000\010\016\116" +
    "\025\176\026\123\001\001\000\004\027\135\001\001\000" +
    "\002\001\001\000\010\016\116\025\201\026\123\001\001" +
    "\000\004\027\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\206\001\001\000\002" +
    "\001\001\000\010\021\210\022\032\023\030\001\001\000" +
    "\002\001\001\000\004\031\212\001\001\000\002\001\001" +
    "\000\004\006\253\001\001\000\010\005\246\006\247\015" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\232\015\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\251\015\250" +
    "\001\001\000\002\001\001\000\004\006\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LanguageParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LanguageParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LanguageParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruction> AST;
    private LinkedList<GlobalError> errors;
    private Operation operation;

    public LanguageParser(LanguageLexer lexer, LinkedList<GlobalError> errors) {
        super(lexer);
        this.errors = errors;
        this.AST = new LinkedList<>();      
    }

     public void syntax_error(Symbol symbol) {
        String message = "";
        switch(symbol.toString()) {
            case "#39": case "#19": case "#17": case "#18": case "#40": case "#20":{ 
                message = "No se esperaba un signo de agrupacion llave, parentesis o corchete, verifique.";
            break;
            } 
            case "#15": case "#14": case "#13": { 
                message = "No se esperaba un signo de uni operacion, ya sea '*', '+' o '?', verifique.";
            break;
            } 
            case "#16":{ 
                message = "No se esperaba un signo de bi operacion, ya sea '|' o '.' verifique.";
            break;
            } 
            case "#24": case "#25": { 
                message = "No se esperaba un macro ya sea de [a-z] o [0-9], verifique.";
            break;
            } 
            case "#23": case "#21": case "#22":{ 
                message = "No se esperaba un regex ya sea Espacio, Tabulacion o Nueva Linea, verifique.";
            break;
            } 
            case "#28": message = "No se esperaba un caracter, verifique."; break;
            case "#41": message = "No se esperaba un numero de version, verifique."; break;
            case "#35": message = "No se esperaba el ID de un no terminal, verifique."; break;
            case "#36": message = "No se esperaba el ID de un terminal, verifique."; break;
            case "#9": message = "No se esperaba un separador '%%', verifique."; break;
            case "#2": message = "No se esperaba la palabra reservada NOMBRE, verifique."; break;
            case "#31": message = "No se esperaba la palabra reservada ENTERO, verifique."; break;
            case "#3": message = "No se esperaba la palabra reservada VERSION, verifique."; break;
            case "#42": message = "No se esperaba una comilla, verifique."; break;
            case "#27": message = "No se esperaba un ampersand '&', verifique."; break;
            case "#33": message = "No se esperaba la palabra reservada CADENA, verifique."; break;
            case "#32": message = "No se esperaba la palabra reservada REAL, verifique."; break;
            case "#30": message = "No se esperaba la palabra reservada NO, verifique."; break;
            case "#4": message = "No se esperaba la palabra reservada AUTOR, verifique."; break;
            case "#6": message = "No se esperaba la palabra reservada EXTENSION, verifique."; break;
            case "#29": message = "No se esperaba la palabra reservada TERMINAL, verifique."; break;
            case "#5": message = "No se esperaba la palabra reservada LANZAMIENTO, verifique."; break;
            case "#37": message = "No se esperaba la palabra reservada RESULT, verifique."; break;
            case "#7": message = "No se esperaba punto y coma, verifique"; break;
            case "#8": message = "No se esperaban dos puntos ':' , verifique"; break;
            case "#38": message = "No se esperaba doble dos puntos '::' , verifique"; break;
            case "#34": message = "No se esperaba coma, verifique"; break;
            case "#26": message = "No se esperaba igual, verifique"; break;
            case "#10": message = "Puede que su ID no tenga una sintaxis correcta o que se encuentre en un lugar indebido, verifique." ; break;
            case "#43": message = "Puede que su entero no tenga una sintaxis correcta o que se encuentre en un lugar indebido, verifique." ; break;
        }
        System.out.println(message);
        GlobalError error = new GlobalError("sintactico", (String)symbol.value, message, symbol.right,(symbol.left - 1));
        errors.add(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        System.err.println("Error sintactico irrecuperable en la Linea " + (s.left) + " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LanguageParser$actions {
  private final LanguageParser parser;

  /** Constructor */
  CUP$LanguageParser$actions(LanguageParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LanguageParser$do_action_part00000000(
    int                        CUP$LanguageParser$act_num,
    java_cup.runtime.lr_parser CUP$LanguageParser$parser,
    java.util.Stack            CUP$LanguageParser$stack,
    int                        CUP$LanguageParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LanguageParser$result;

      /* select the action based on the action number */
      switch (CUP$LanguageParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= actions EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		RESULT = start_val;
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LanguageParser$parser.done_parsing();
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // actions ::= language_info SEPARATOR java_code SEPARATOR lexical_exp SEPARATOR symbols_list SEPARATOR grammar 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-8)).right;
		Language l = (Language)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-6)).value;
		int regexleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).left;
		int regexright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).right;
		LinkedList<Instruction> regex = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).value;
		 for(Instruction instruction : regex) AST.add(instruction); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("actions",0, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-8)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // actions ::= language_info SEPARATOR SEPARATOR lexical_exp SEPARATOR symbols_list SEPARATOR grammar 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-7)).right;
		Language l = (Language)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-7)).value;
		int regexleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).left;
		int regexright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).right;
		LinkedList<Instruction> regex = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).value;
		 for(Instruction instruction : regex) AST.add(instruction); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("actions",0, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-7)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // actions ::= error 
            {
              Object RESULT =null;

              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("actions",0, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // language_info ::= name 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // language_info ::= name version 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, v, "not specified", "not specified","not specified"); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // language_info ::= name autor 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, "not specified", a, "not specified", "not specified"); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // language_info ::= name release 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, "not specified", "not specified", String.valueOf(r), "not specified"); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // language_info ::= name extension 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, "not specified", "not specified", "not specified", e); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // language_info ::= name version autor 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, v, a, "not specified", "not specified"); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // language_info ::= name version release 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, v, "not specified", String.valueOf(r), "not specified"); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // language_info ::= name version extension 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, v, "not specified", "not specified", e); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // language_info ::= name autor release 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, "not specified", a, String.valueOf(r), "not specified"); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // language_info ::= name autor extension 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, "not specified", a, "not specified", e); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // language_info ::= name release extension 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, "not specified", "not specified", String.valueOf(r), e); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // language_info ::= name version autor release 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, v, a, String.valueOf(r), "not specified"); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // language_info ::= name version autor extension 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, v, a, "not specified", e); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // language_info ::= name autor release extension 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, "not specified", a, String.valueOf(r), e); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // language_info ::= name version autor release extension 
            {
              Language RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Language(n, v, a, String.valueOf(r), e); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // language_info ::= error 
            {
              Language RESULT =null;

              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("language_info",13, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // name ::= NOMBRE COLON ID SEMICOLON 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = name; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // version ::= VERSION COLON VER_RES SEMICOLON 
            {
              String RESULT =null;
		int verleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int verright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String ver = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = ver; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("version",2, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // autor ::= AUTOR COLON extended_id SEMICOLON 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = id; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("autor",3, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // autor ::= AUTOR COLON ID SEMICOLON 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = id; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("autor",3, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // release ::= LANZAMIENTO COLON INT SEMICOLON 
            {
              Integer RESULT =null;
		int yearleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int yearright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Integer year = (Integer)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = year; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("release",11, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // extension ::= EXTENSION COLON ID SEMICOLON 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = id; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("extension",4, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // extended_id ::= extended_id ID 
            {
              String RESULT =null;
		int phraseleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int phraseright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = phrase + " " + id; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("extended_id",5, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // extended_id ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = id; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("extended_id",5, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // java_code ::= java_code JAVAC 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = code + ch; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("java_code",6, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // java_code ::= java_code REGEX 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int regexleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int regexright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String regex = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = code + regex; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("java_code",6, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // java_code ::= JAVAC 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = ch; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("java_code",6, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // java_code ::= REGEX 
            {
              String RESULT =null;
		int regexleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int regexright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String regex = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = regex; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("java_code",6, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lexical_exp ::= lexical_exp ID EQUAL expression SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int allleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).left;
		int allright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).right;
		LinkedList<Instruction> all = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = all; RESULT.add(new RegularExpression(id, exp, expright, expleft-1, false)); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("lexical_exp",14, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lexical_exp ::= lexical_exp AMPERSAND EQUAL expression SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int allleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).left;
		int allright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).right;
		LinkedList<Instruction> all = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = all; RESULT.add(new RegularExpression(id, exp, expright, expleft-1, true)); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("lexical_exp",14, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lexical_exp ::= ID EQUAL expression SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new RegularExpression(id, exp, expright, expleft-1, false)); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("lexical_exp",14, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lexical_exp ::= AMPERSAND EQUAL expression SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new RegularExpression(id, exp, expright, expleft-1, true)); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("lexical_exp",14, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression bi_operation ROUNDB_O expression ROUNDB_C uni_operation 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-5)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-5)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-5)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.MULTI_C, null, left, right, par, c, cright, cleft - 1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-5)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression bi_operation SQUAREB_O expression SQUAREB_C uni_operation 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-5)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-5)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-5)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.MULTI_C, null, left, right, par, c, cright, cleft - 1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-5)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression bi_operation ROUNDB_O expression ROUNDB_C 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = (Node) new Operation(RegexType.BI_C, null, left, r, par, null, rright, rleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression bi_operation SQUAREB_O expression SQUAREB_C 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = (Node) new Operation(RegexType.BI_C, null, left, r, par, null, rright, rleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= ROUNDB_O expression ROUNDB_C uni_operation 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.UNI_C, null, l, null, par, null, lright, lleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= SQUAREB_O expression SQUAREB_C uni_operation 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.UNI_C, null, l, null, par, null, lright, lleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= ROUNDB_O expression ROUNDB_C 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = exp; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= SQUAREB_O expression SQUAREB_C 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = exp; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression bi_operation str uni_operation 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.MULTI_C, null, left, right, par, c, cright, cleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression bi_operation NUMBER_RANK uni_operation 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.MULTI_C, null, left, right, par, (Node) new Operation(RegexType.NUMBER_MACRO, null, null, null, null, val).execute(), valright, valleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression bi_operation LETTER_RANK uni_operation 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.MULTI_C, null, left, right, par, (Node) new Operation(RegexType.LETTER_MACRO, null, null, null, null, val).execute(), valright, valleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression bi_operation str 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.BI_C, null, left, right, par, null, rightright, rightleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression bi_operation NUMBER_RANK 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.BI_C, null, left, (Node) new Operation(RegexType.NUMBER_MACRO, null, null, null, null, val).execute(), par, null, valright, valleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression bi_operation LETTER_RANK 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.BI_C, null, left, (Node) new Operation(RegexType.LETTER_MACRO, null, null, null, null, val).execute(), par, null, valright, valleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= str uni_operation 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.UNI_C, null, left, null, par, null, leftright, leftleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= NUMBER_RANK uni_operation 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.UNI_C, null, (Node) new Operation(RegexType.NUMBER_MACRO, null, null, null, null, val).execute(), null, par, null, valright, valleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= LETTER_RANK uni_operation 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.UNI_C, null, (Node) new Operation(RegexType.LETTER_MACRO, null, null, null, null, val).execute(), null, par, null, valright, valleft-1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= str 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = val; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= NUMBER_RANK 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.NUMBER_MACRO, null, null, null, null, val).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= LETTER_RANK 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.LETTER_MACRO, null, null, null, null, val).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= error 
            {
              Node RESULT =null;

              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // str ::= str character 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Integer ch = (Integer)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (Node) new Operation(RegexType.CONCAT, new Leaf(ch, true), st, null, null, null, chright, chleft -1).execute(); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("str",20, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // str ::= QUOTE str QUOTE 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = st; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("str",20, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // str ::= character 
            {
              Node RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Integer ch = (Integer)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT =  new Node(new Leaf(ch, true)); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("str",20, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bi_operation ::= PIPE 
            {
              Node RESULT =null;
		 RESULT = new Node(new Leaf((int)'|', RegexType.OR, false)); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("bi_operation",21, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bi_operation ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(new Leaf((int) '.', RegexType.CONCAT, false)); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("bi_operation",21, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // uni_operation ::= ASTERISK 
            {
              Node RESULT =null;
		 RESULT = new Node(new Leaf((int)'*', RegexType.KLEENE, false)); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("uni_operation",22, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // uni_operation ::= PLUS 
            {
              Node RESULT =null;
		 RESULT = new Node(new Leaf((int)'+', RegexType.PLUS, false)); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("uni_operation",22, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // uni_operation ::= QUESTION_MARK 
            {
              Node RESULT =null;
		 RESULT = new Node(new Leaf((int)'?', RegexType.QUESTION_MARK, false)); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("uni_operation",22, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // character ::= CHAR 
            {
              Integer RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = (int) var.charAt(0); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // character ::= TAB 
            {
              Integer RESULT =null;
		 RESULT = (int) "\t".charAt(0); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // character ::= NEW_LINE 
            {
              Integer RESULT =null;
		 RESULT = (int) "\n".charAt(0); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // character ::= SPACE 
            {
              Integer RESULT =null;
		 RESULT = (int) " ".charAt(0); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // symbols_list ::= terminals SEMICOLON symbols_list 
            {
              LinkedList<Terminal> RESULT =null;
		int terminalleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int terminalright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Terminal terminal = (Terminal)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int allleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int allright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		LinkedList<Terminal> all = (LinkedList<Terminal>)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = all; RESULT.add(terminal); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("symbols_list",15, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // symbols_list ::= non_terminals SEMICOLON symbols_list 
            {
              LinkedList<Terminal> RESULT =null;
		int nonleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int nonright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		Terminal non = (Terminal)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int allleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int allright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		LinkedList<Terminal> all = (LinkedList<Terminal>)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = all; RESULT.add(non); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("symbols_list",15, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // symbols_list ::= terminals SEMICOLON 
            {
              LinkedList<Terminal> RESULT =null;
		int terminalleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int terminalright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Terminal terminal = (Terminal)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(terminal); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("symbols_list",15, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // symbols_list ::= non_terminals SEMICOLON 
            {
              LinkedList<Terminal> RESULT =null;
		int nonleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int nonright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		Terminal non = (Terminal)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(non); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("symbols_list",15, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // terminals ::= TERMINAL symbol_type terminal_id 
            {
              Terminal RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		SymType type = (SymType)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Terminal(id, type, true); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("terminals",16, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // terminals ::= TERMINAL terminal_id 
            {
              Terminal RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Terminal(id, SymType.NONE, true); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("terminals",16, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // terminal_id ::= LOWER_C COMMA terminal_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int allleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int allright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String all = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = id + ',' + all; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("terminal_id",7, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // terminal_id ::= LOWER_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = id; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("terminal_id",7, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // non_terminals ::= NO TERMINAL symbol_type non_terminal_id 
            {
              Terminal RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		SymType type = (SymType)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Terminal(id, type, false); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("non_terminals",17, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // non_terminals ::= NO TERMINAL non_terminal_id 
            {
              Terminal RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = new Terminal(id, SymType.NONE, false); 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("non_terminals",17, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // non_terminal_id ::= UPPER_C COMMA non_terminal_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int allleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int allright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String all = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = id + ';' + all; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("non_terminal_id",8, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // non_terminal_id ::= UPPER_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = id; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("non_terminal_id",8, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // symbol_type ::= ENTERO 
            {
              SymType RESULT =null;
		 RESULT = SymType.INTEGER; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("symbol_type",18, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // symbol_type ::= REAL 
            {
              SymType RESULT =null;
		 RESULT = SymType.REAL; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("symbol_type",18, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // symbol_type ::= CADENA 
            {
              SymType RESULT =null;
		 RESULT = SymType.STRING; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("symbol_type",18, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // grammar ::= LOWER_C DOUBLE_COLON id_asig semantic_rules 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("grammar",23, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // grammar ::= UPPER_C DOUBLE_COLON id_asig semantic_rules 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("grammar",23, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // id_asig ::= LOWER_C id_asig 
            {
              Object RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int terright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String ter = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int allleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int allright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Object all = (Object)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = null; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("id_asig",24, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // id_asig ::= UPPER_C id_asig 
            {
              Object RESULT =null;
		int nonleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int nonright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String non = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int allleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int allright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		Object all = (Object)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = null;  
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("id_asig",24, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // id_asig ::= LOWER_C 
            {
              Object RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int terright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String ter = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		RESULT = null; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("id_asig",24, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // id_asig ::= UPPER_C 
            {
              Object RESULT =null;
		int nonleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int nonright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String non = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = null; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("id_asig",24, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // semantic_rules ::= CURLYB_O RESULT EQUAL code_j CURLYB_C 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = r + " " +  e + " " +  c; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("semantic_rules",9, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-4)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // semantic_rules ::= CURLYB_O code_j CURLYB_C 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		 RESULT = c; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("semantic_rules",9, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-2)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // code_j ::= code_j LOWER_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = e + c; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("code_j",10, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // code_j ::= code_j UPPER_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = e + c; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("code_j",10, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.elementAt(CUP$LanguageParser$top-1)), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // code_j ::= LOWER_C 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT =c; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("code_j",10, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // code_j ::= UPPER_C 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = c; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("code_j",10, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // code_j ::= REGEX 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = r; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("code_j",10, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // code_j ::= JAVAC 
            {
              String RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = j; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("code_j",10, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // code_j ::= SEMICOLON 
            {
              String RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$LanguageParser$stack.peek()).value;
		 RESULT = j; 
              CUP$LanguageParser$result = parser.getSymbolFactory().newSymbol("code_j",10, ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LanguageParser$stack.peek()), RESULT);
            }
          return CUP$LanguageParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LanguageParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LanguageParser$do_action(
    int                        CUP$LanguageParser$act_num,
    java_cup.runtime.lr_parser CUP$LanguageParser$parser,
    java.util.Stack            CUP$LanguageParser$stack,
    int                        CUP$LanguageParser$top)
    throws java.lang.Exception
    {
              return CUP$LanguageParser$do_action_part00000000(
                               CUP$LanguageParser$act_num,
                               CUP$LanguageParser$parser,
                               CUP$LanguageParser$stack,
                               CUP$LanguageParser$top);
    }
}

}
